#version 430

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// We could have used a texture sampler to access our image here, but we do not need
// texture sampling (interpolation, texels...), so imageLoad is sufficient to get access
// to our image data
layout(binding = 0, rgba8ui) readonly uniform uimage2D inImage;
layout(binding = 1, rgba8ui) writeonly uniform uimage2D outImage;

shared uvec4 pixels[20][20]; // 20 = 16 /* tileSize */ + 2 * 2 /* blurRaidus = 2 */


ivec2 clampLocation(ivec2 xy, ivec2 imageSize) {
    return clamp(xy, ivec2(0,0), imageSize);
}

uvec4 computeBlurPixelWithSharedMemory(ivec2 pixel_xy) {
    ivec2 tileSize = ivec2(16,16);
    ivec2 local_pixel_xy = ivec2(gl_LocalInvocationID.xy);
    ivec2 imageSize = ivec2(gl_WorkGroupSize.x * gl_NumWorkGroups.x, gl_WorkGroupSize.y * gl_NumWorkGroups.y);

    // Read the image's neighborhood into a shared pixel array
    for (int j = 0; j < 20; j += tileSize.y) {
        for (int i = 0; i < 20; i += tileSize.x) {
            if ( local_pixel_xy.x + i < 20 &&
                 local_pixel_xy.y + j < 20) {
                    ivec2 read_at = clampLocation(pixel_xy + ivec2(i, j) - 2, imageSize);
                    pixels[local_pixel_xy.y + j][local_pixel_xy.x + i] = imageLoad(inImage, read_at);
                 }
        }
    }

    // Make sure all threads have prefetched input pixels data
    memoryBarrierShared();
    barrier();

    // Compute blur pixels from its neighborhood
    ivec4 result = ivec4(0);
    for (int j = 0; j < 5; ++j) {
        for (int i = 0; i < 5; ++i) {
            result += ivec4(pixels[local_pixel_xy.y + j][local_pixel_xy.x + i]);
        }
    }
    return uvec4(result / 25);
}

uvec4 computeBlurPixel(ivec2 pixel_xy) {
    ivec2 imageSize = ivec2(gl_WorkGroupSize.x * gl_NumWorkGroups.x, gl_WorkGroupSize.y * gl_NumWorkGroups.y);
    ivec4 result = ivec4(0);
    for (int j = 0; j < 5; ++j) {
        for (int i = 0; i < 5; ++i) {
            ivec2 read_at = clampLocation(pixel_xy + ivec2(i, j) - 2, imageSize);
            result += ivec4(imageLoad(inImage, read_at));
        }
    }
    return uvec4(result / 25);
}

void main() {
    ivec2 pixel_xy = ivec2(gl_GlobalInvocationID.xy);
    //uvec4 color = computeBlurPixel(pixel_xy);
    uvec4 color = computeBlurPixelWithSharedMemory(pixel_xy);

    imageStore(outImage, pixel_xy, uvec4(color.rgb, 255));
}